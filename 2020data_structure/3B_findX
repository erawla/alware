#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
#define MAX_STACK_SIZE 201
 
int err;

typedef struct Stack
{
    int stack[MAX_STACK_SIZE];
    int top;
}StackType;
 

void init(StackType *s) //reset stack
{
    s->top = -1;
}
 

int is_empty(StackType *s) //empty?
{
    return (s->top == -1);
}
 
int is_full(StackType *s) //full?
{
    return (s->top == (MAX_STACK_SIZE - 1));
}
 
StackType *s;
 
void push(StackType *s, int item) //push item in stack
{
    if (is_full(s)) 
	{
        printf("stack is full\n");
        return;
    }
    else s->stack[++(s->top)] = item;
 
}
 
int pop(StackType *s) //pop item from stack
{
    if (is_empty(s)) 
	{
        printf("stack is empty\n");
        exit(1);
    }
    else return s->stack[(s->top)--];
 
}
 
 
int peek(StackType *s) //return value top of stack
{
    if (is_empty(s)) 
	{
        printf("stack is empty\n");
        exit(1);
    }
    else return s->stack[s->top];
 
}
 
int prec(char op) //operator priority
{
    switch (op) 
	{
    	case '(': case ')': return 0;
    	case '+': case '-': return 1;
    	case '*': case '/': return 2;
    }
    return -1;
}
 

int calc(char *exp, int n) //calc postfix 
{
    int op1, op2, value = 0, i = 0;
    int len = strlen(exp);
    char ch1, ch2, ch3, ch4;//for thousand, hundred, ten
    StackType s;
    init(&s); //reset stack
    for(i=0;i<len;i++)
	{
		ch1=exp[i];
		if(ch1==' ') ch1=exp[++i];
		if((ch1>='0' && ch1<='9') || ch1=='x')
		{
		//printf("*\n");
			ch2=exp[i+1];
			if((ch2>='0' && ch2<='9') || ch2=='x')
			{
				ch3=exp[i+2];
				if((ch3>='0' && ch3<='9') || ch3=='x')
				{
					ch4=exp[i+3];
					if((ch4>='0' && ch4<='9') || ch4=='x')
					{
						if(ch1>'1') 
						{
							printf("invalid expressions	\n");//if upper 1000
							err=1;
							break;
						}
						value=(((ch1-'0')*10*10*10)+((ch2-'0')*10*10)+((ch3-'0')*10)+(ch4-'0'));
						push(&s,value);
						i=i+3;
					}
					else
					{
						value=(((ch1-'0')*10*10)+((ch2-'0')*10)+(ch3-'0'));
						push(&s,value);
						i=i+2;
					}
				}
				else
				{
					value=(((ch1-'0')*10)+(ch2-'0'));
					push(&s,value);
					i=i+1;
				}
			}
			else
			{
				if(ch1=='x') 
				{
					ch1=n;
					value=ch1;
				}
				else value=ch1-'0';
				push(&s,value);
			}
		}
		else
		{
			op2=pop(&s);
			op1=pop(&s);
			switch(ch1)
			{
				case '+': 
					push(&s, op1+op2); break;
				case '-':
					push(&s, op1-op2); break;
				case '*':
					push(&s, op1*op2); break;
				case '/':
					push(&s, op1/op2); break;
			}
		}
	}
	if(err==1) return -1;
    return pop(&s);
}
 

void infix_to_postfix(char exp[], char cexp[]) //infix to postfix
{
    int i = 0;
    int j = 0;
    char ch, ch2, ch3, ch4, top_op;
    int len = (int)strlen(exp);
 
    StackType s;
    init(&s); //reset stack
 
    for (i = 0; i < len; i++) 
	{
        ch = exp[i];
        ch2 = exp[i + 1]; 
        ch3=exp[i+2];
        ch4=exp[i+3];
        
        //printf("ch= %c ch2= %c ch3= %c ch4= %c\n",ch,ch2,ch3,ch4);
        switch (ch) 
		{
        	case '+': case '-': case '*': case '/':

            	while (!is_empty(&s) && (prec(ch) <= prec(peek(&s)))) 
				{
                	cexp[j++] = pop(&s);
                	cexp[j++] = ' ';
            	}
            push(&s, ch);
            break;
 
        case '(':           
            push(&s, ch);
            break;
        case ')':           
            top_op = pop(&s);
 
            while (top_op != '(') 
			{          
                cexp[j++] = top_op;
                cexp[j++] = ' ';
 
                top_op = pop(&s);
            }
            break;
            
        default:
            cexp[j++] = ch; 
            if ((ch2>='0' && ch2<='9') || ch2=='x')
            {
                cexp[j++] = ch2; 
                i++; 
            }
            else 
            {
            	cexp[j++] = ' ';
 
            break;
			}
            if ((ch3>='0' && ch3<='9') || ch3=='x')
            {
                cexp[j++] = ch3; 
                i++; 
            }
            else 
            {
            	cexp[j++] = ' ';
 
            break;
			}
            if ((ch4>='0' && ch4<='9') || ch4=='x')
            {
                cexp[j++] = ch4; 
                i++; 
            }
            else 
            {
            	cexp[j++] = ' ';
 
            break;
			}
            cexp[j++] = ' ';
 
            break;
        }
    }
 
    while (!is_empty(&s)) {
        cexp[j++] = pop(&s);
        cexp[j] = NULL;
    }
}
 
void main() {
 
    int result = 0;
    int p, m;
    int i;
 
    char a[101];//infix
    char b[201];//postfix
 
    scanf("%s", a);
    scanf("%d %d", &p,&m);
    //printf("infix : %s \n", a);
    infix_to_postfix(a, b);
   
    //printf("postfix : %s \n", b);
 	for(i=0;i<10;i++)
 	{
    	result = (calc(b,i)%m);
    	if(err)	return 0;
    	if(p==result) break;
	}
    printf("%d",i);
 
 	return 0;
}
