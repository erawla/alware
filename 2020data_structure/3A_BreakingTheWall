#include <stdio.h>

int n,m,rear,front;
int map[15][15];
int check_map[15][15][2];//x,y,b
int dirx[4]={0,0,-1,1};
int diry[4]={1,-1,0,0}; //direction of up down left right

typedef struct bfs_que{
	int break_wall;//break or not
	int x;//map[][x]
	int y;//map[y][]
}que;

que queue[501];

int inside(int x, int y)//is inside?
{
	return (y>=1 && y<=n && x>=1 && x<=m);
}

void enque(int nx, int ny, int b)
{
	que tmp;
	
	tmp.break_wall=b;
	tmp.x=nx; 
	tmp.y=ny;
	//printf("rear=%d",rear);
	queue[rear++]=tmp;
}

void deque()
{
	front++;
}

int is_empty()
{
	if(front==rear) return 0;
	else return 1;
}

int bfs()
{
	int i,j;
	enque(1,1,1);
	check_map[1][1][1]=1;
	
	while(is_empty())
	{
		int x=queue[front].x;
		int y=queue[front].y;
		int b=queue[front].break_wall;
		deque();
		
		if(x==m && y==n)
		{
			return check_map[y][x][b];
		}
		
		for(i=0;i<4;i++)
		{
			int newx=x+dirx[i];
			int newy=y+diry[i];
			
			if(inside(newx,newy))
			{
				if(map[newy][newx]==1 && b)
				{
					//printf("%d\n",check_map[newy][newx][b]);
					check_map[newy][newx][b-1] = check_map[y][x][b]+1;
					enque(newx,newy,b-1);
				}
				if(map[newy][newx]==0 && check_map[newy][newx][b]==0)
				{
					
					check_map[newy][newx][b]=check_map[y][x][b]+1;
					enque(newx,newy,b);
				}
			}
		}
	}
	return -1;
}

int main()
{
	int i, j, v;
	scanf("%d %d",&n,&m);
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=m;j++)
		{
			scanf("%1d",&v);
			map[i][j]=v;
		}
	}
	
	printf("%d",bfs());
	
	return 0;
}
